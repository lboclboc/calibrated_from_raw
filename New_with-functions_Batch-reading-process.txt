// macro: Calibrated_object files from Canon CR2 raw files
// This macro read Canon EOS raw files and convert them to 16 bit tiff. 
// Then dark and bias with only dithering technic, flat calibrate them and then save as 32 bit tiff

print("This macro read Canon EOS raw files and convert them to 16 bit Tiff file");
print("Then dark and bias with only dithering technic, flat calibrate them and then save as 32 bit tiff");

// macro by Lars Karlsson
// to use with the software AstroImageJ for astrophoto calibrating, demosaic
// its main use is to read raw files from DSLR cameras
// my first attempt to make a macro that read a batch of Canon CR2 files

print(" ");
print("version 20200116"); // latest

// History:
// version 20200112
// new menu to make it easier to use
//
// History:
// version 20200108
// spelling corrections
//
// version 20200105
// Lot of new options
// Set a multiplier for red and blue channel
// Set a gain when dooing HDR images
// Choise which number base in filename, 1000, 2000, 3000 ...
// 
// version 20170930
// Added option to calibrate with or without flats
// change how to add camera data in filename
//
// version 20170926
// Added option how to set output filename
// 
// version 20160515
// First release

print(" ");
print("visit my homepage to get latest version:");
print("http://astrofriend.eu/astronomy/tutorials/tutorial-astroimagej/tutorial-aij-03-my-own-macros.html");

// there is also an instruction how to use this macro
// use it by your own risk, have backup of your files!

// Note this marcro dark and bias calibrate the objectfile without and dark and bias files
// to get this to work the image must be taken with dithering technic



print ("Start batch reading process");
getDateAndTime(year,month,dow,day,h,m,s,msec);
t = ""+year+"-"+month+"-"+day+"T"+h+":"+m+":"+s;
print("\n-------------------- "+t+" --------------------");

// ********************* Setup default directories which you often use *********************
rawImagesDirectory = "K:/Astro processed raw and fit/../";
masterFlatDirectory = "K:/Astro calibration/Master/../";

print(" ");
print("Default raw files directory: " + rawImagesDirectory);
print("Default masterflat directory: " + masterFlatDirectory);

//call("ij.io.OpenDialog.setDefaultDirectory", rawImagesDirectory);
//call("ij.io.OpenDialog.setDefaultDirectory", masterFlatDirectory);




print ("Setup input numbers and file directories:");

// Input file format
// Note: Only works with some Canon EOS yet, Canon 350D, 5D and 6D tested
fileformat = newArray(4);
fileformat[0] = ".tif"; // TIFF from eralier run of process
fileformat[1] = ".cr2"; // Canon raw format
fileformat[2] = ".nef"; // Nikon raw format (experimental)
fileformat[3] = ".arw"; // Sony raw format (experimental)

// Default gains, Canon 6D standard
gainRed   = 1.5; // red gain=1.5 normal for Canon sensors, change this to your cameras red gain rel green
gainGreen = 1.0; // gain for green channel is always set to 1
gainBlue  = 1.7; // blue gain=1.7 normal for Canon sensors, change this to your cameras blue gain rel green

// HDR gain, use this when doing HDR images example ISO1600/ISO400=4
hdrGain=1;

// Do a master flat calibration
flatcalibrate = true;

// Input file name order
// Time is to prefer if there is a small drift because of bad polar align or a comet that moves relative stars.
filenameorder = newArray(2);
filenameorder[0] = "time"; // Time: 1001_Blue, 1001_Green1, 1001_Green2, 1001_Red, 1002_Blue, 1002_Green1, 1002_Green2, 1002_Red .......
filenameorder[1] = "color"; // Color: Red_1001, Red_1002, Red_1003 ...... Gren1_1001, Green1_1002, Green1_1003 .....

// File number serie, offset second batch if you want to merge them later
// offset: 1000, 2000, 3000 ...
offset = newArray(6);
offset[0] = 1000; // the default number
offset[1] = 2000; //
offset[2] = 3000; //
offset[3] = 4000; //
offset[4] = 5000; //
offset[5] = 6000; //

// Which colors to keep when demosaic ?
mosaicColor = newArray(4);
mosaicColor[0] = 1; // Red
mosaicColor[1] = 1; // Green1
mosaicColor[2] = 1; // Green2
mosaicColor[3] = 1; // Blue


// if enabled extra data add to the end of filename
// set cameradata = 0 (false) or cameradata = 1 (true)
cameradata= 0 ;
equipment="20200101 etc"; // Extra info in file name

// Input box with parameters

Dialog.create("Setup batch reading process");

Dialog.addMessage("No need of bias and dark cal, read overscan data of the sensor.");
Dialog.addMessage("Batch reading raw files, flat calibrate, demosaic");
Dialog.addMessage("BATCH RAW READING DATA AND SAVE AS CFA 16-bit TIFF STARTS HERE:");
Dialog.addChoice("     Input files format:",fileformat,fileformat[1]); // Default = Canon cr2 raw files

Dialog.addMessage("When file format is Tiff it suppose to be CFA images, jumps direct to demosaicing");

Dialog.addMessage("File name order:");
Dialog.addChoice("Time or Color order : ",filenameorder,filenameorder[0]);

Dialog.addMessage("Set an offset to the base number to not mix them up later.");
Dialog.addChoice("   File name offset :",offset,offset[0]); // Default = 1000

Dialog.addMessage("Add extra info to filename ?");
Dialog.addCheckbox("Date, Object etc",cameradata);

Dialog.addMessage("Extra info at the end of file name :");
Dialog.addString("Date, Object etc : ", equipment);

Dialog.addMessage("DEMOSAICING STARTS HERE:");
Dialog.addMessage("Which colors to keep ?");
Dialog.addCheckbox("   Red : ", mosaicColor[0]);
Dialog.addCheckbox("Green1 : ", mosaicColor[1]);
Dialog.addCheckbox("Green2 : ", mosaicColor[2]);
Dialog.addCheckbox("  Blue : ", mosaicColor[3]);

Dialog.addMessage("FLAT CALIBRATE, SAVE AS 32-bit TIFF STARTS HERE:");

Dialog.addMessage("Gain for each color channel :");
Dialog.addNumber("          Red gain : ",gainRed);
Dialog.addNumber("        Green gain : ",gainGreen);
Dialog.addNumber("         Blue gain : ",gainBlue);

Dialog.addMessage("HDR gain, ex ISO1600 / ISO400 = 4 :");
Dialog.addNumber("          HDR gain : ",hdrGain);

Dialog.addMessage("Flat calibrate ?");
Dialog.addCheckbox("    _flat calibrate",flatcalibrate);

Dialog.show();

// Save input from inputbox

filetype = Dialog.getChoice();
print("Filetype = ",filetype);

order = Dialog.getChoice();
print("File name order = ", order);

offsetString = Dialog.getChoice();
if (offsetString == "1000.0") {
	offset = 1000 ; }
else if (offsetString == "2000.0") {
	offset = 2000 ; }
else if (offsetString == "3000.0") {
	offset = 3000 ; }
else if (offsetString == "4000.0") {
	offset = 4000 ; }
else if (offsetString == "5000.0") {
	offset = 5000 ; }
else if (offsetString == "6000.0") {
	offset = 6000 ; }
print("Offset = ", offset);


cameradata = Dialog.getCheckbox();
print("Extra file info ? ", cameradata);

equipment      = Dialog.getString();
print("Extra file info = ", equipment);

if (!cameradata) {
	equipment = "";
}
print("Extra file info = ", equipment);

mosaicColor[0] = Dialog.getCheckbox();
print("Keep Red : ", mosaicColor[0]);

mosaicColor[1] = Dialog.getCheckbox();
print("Keep Green1 : ", mosaicColor[1]);

mosaicColor[2] = Dialog.getCheckbox();
print("Keep Green2 : ", mosaicColor[2]);

mosaicColor[3] = Dialog.getCheckbox();
print("Keep Blue : ", mosaicColor[3]);

redGain = Dialog.getNumber();
print("Gain Red = ", redGain);
greenGain = Dialog.getNumber();
print("Gain Green = ", greenGain);
blueGain = Dialog.getNumber();
print("Gain Blue = ", blueGain);

hdrGain = Dialog.getNumber();
print("HDR gain = ", hdrGain);

redHdrGain=redGain*hdrGain;
print("Red HDR gain = ", redHdrGain);
greenHdrGain=greenGain*hdrGain;
print("Green HDR gain = ", greenHdrGain);
blueHdrGain=blueGain*hdrGain;
print("Blue HDR gain = ", blueHdrGain);

flatcal      = Dialog.getCheckbox();
print("Flat calibrate = ", flatcal);

// ********************* first part: reading raw files and convert to tiff *******************************

//Get File Directory with raw object images

print(" ");
print("*************************************");
print(" ");
print("Part one: Convert raw files to CFA 16-bit TIFF format");
print(" ");

call("ij.io.OpenDialog.setDefaultDirectory", rawImagesDirectory);  // Set default Raw files directory

dirSourch = getDirectory("Select Input object raw files Directory");
print(" ");
print("Reading files from: " + dirSourch);
fileList = getFileList(dirSourch);

// **************** work to be done on image, part 1 *****************************
work1 = "Batch read Canon CR2 raw files with overscan area and convert to CFA tiff bit and save";

print(" ");
print(work1 + " - Starting");
print("Reading raw files from : " + dirSourch);

// ************************ Creates sub directories ******************************

dirDestCfa = dirSourch + "cfa" + File.separator; // cfa directory, this one can be deleted later
File.makeDirectory(dirDestCfa);
print("Create output cfa directory: " + dirDestCfa);

dirDestRaw = dirSourch + "raw" + File.separator; // raw directory, place your raw files here later
File.makeDirectory(dirDestRaw);
print("Create output raw directory: " + dirDestRaw);

dirDestAlign = dirSourch + "align" + File.separator; // align directory, place your align files here
File.makeDirectory(dirDestAlign);
print("Create output align directory: " + dirDestAlign);

dirDestStack = dirSourch + "stack" + File.separator; // stack directory, place your stacked files here
File.makeDirectory(dirDestStack);
print("Create output stack directory: " + dirDestStack);

// set to true and it will be fast, set to false and you can see the process in work
setBatchMode(true);

// ********************* open library of rggb masterflat files *********************

call("ij.io.OpenDialog.setDefaultDirectory", masterFlatDirectory);  // Set default MasterFlat directory

if (flatcal) {
	masterFlatRed    = File.openDialog("Select MasterFlat Red file");
	masterFlatGreen1 = File.openDialog("Select MasterFlat Green1 file");
	masterFlatGreen2 = File.openDialog("Select MasterFlat Green2 file");
	masterFlatBlue   = File.openDialog("Select MasterFlat Blue file");
}
else {
	print(" ");
	print("Flat calibration disabled !");
}

fileNumber = 0; // all files in directory
extno=0; // number of files with correct file extension

while (fileNumber < fileList.length) {
	id = fileList[fileNumber++];
	extend=lengthOf(id);
	dotIndex = indexOf(id, ".");

	if (dotIndex >= 0) {
		ext = substring(id, extend-4, extend);
		extno=extno+1;
	}
	else {
		ext = "subdirectory";
	}

// process only correct files, if not Canon change to other file extension above, Note: for the moment only Canon works
	if (ext==filetype) {

	readRawFiles(dirSourch,id);
	saveAs("Tiff", dirDestCfa + "cfa_" + toString(offset*2 + extno));
	close();

		print(toString(fileNumber) + "/" + toString(fileList.length) + ": " + id + " saved as: " + "cfa_" + toString(offset+extno) +".tif");
	}
	else
		print(toString(fileNumber) + "/" + toString(fileList.length) + ": " + id + " excluded");
	}

print("Löpnummer = ", offset,extno,offset+extno);

print(work1 + " - Completed");

// END first part, open raw and store as CFA TIFF 16-bit


// ********************* second part: converting cfa tiff to demosaic rggb calibrated object files ***************************

print(" ");
print("*************************************");
print(" ");
print("Part two: Open demosaiced RG1G2B files and flatcalibrate, normalize, clean for bad data");
print(" ");

work2 = "Convert virtual stack of cfa images to demosaiced rggb, calibrate dark, bias and flat, save as 32 bit tiff";
print(" ");
print(work2 + " - Starting");
print("open cfa files as virtual stack");

//Get File output directory
rotObject = dirSourch; // use the same directory as sourch

dirDestrggb = dirSourch + "object_rggb" + File.separator;
File.makeDirectory(dirDestrggb);
print("create output rggb object dir: " + dirDestrggb);

if (flatcal) {

open(masterFlatRed);
masterFlatRedTitle = getTitle();
print("MasterFlat Red: " + masterFlatRedTitle + " is open");

open(masterFlatGreen1);
masterFlatGreen1Title = getTitle();
print("MasterFlat Green1: " + masterFlatGreen1Title + " is open");

open(masterFlatGreen2);
masterFlatGreen2Title = getTitle();
print("MasterFlat Green2: " + masterFlatGreen2Title + " is open");

open(masterFlatBlue);
masterFlatBlueTitle = getTitle();
print("MasterFlat Blue: " + masterFlatBlueTitle + " is open");

}



// open earlier saved tiff files as a virtual stack
run("Image Sequence...", "open=[" + dirDestCfa + "] number=extno starting=1 increment=1 scale=100 file=[] or=[] sort use");
idSrc = getImageID();
n = nSlices();
print("open cfa as virtual stack");
print(" ");

for (i=1; i<=n; i++) {
	selectImage(idSrc);
	setSlice(i);
	run("Duplicate...", "title=NoStack");
	oneimage = getImageID();

//	debayer order rg1g2b // Red Green1 Green2 Blue

//      Red channel

	selectImage(oneimage);
	makeColorChannel("Red", 0, 0);
	removeBiasDark(dirDestrggb,"Red_",equipment);

	if (flatcal) {
	imageCalculator("Divide 32-bit","deMosaic",masterFlatRedTitle); // flat calibration
	}

	run("Multiply...", "value=redHdrGain");

	if (order == "time") {
		saveAs("Tiff", dirDestrggb + toString(offset+i) + "_Red" + equipment);
	}
	else {
		saveAs("Tiff", dirDestrggb + "Red_" + toString(offset+i) + equipment);
	}
	object = getImageID();
	selectImage(object); close();
	if (isOpen("deMosaic")) {selectImage("deMosaic"); close(); }
	print(toString(i) + "/" + toString(n) + ": " + toString(offset+i) +" Red objectfile finished");

//      Green1 channel

	selectImage(oneimage); 
	makeColorChannel("Green1", -1, 0);
	removeBiasDark(dirDestrggb,"Green1_",equipment);

	if (flatcal) {
	imageCalculator("Divide 32-bit","deMosaic",masterFlatGreen1Title); // flat calibration
	}

	run("Multiply...", "value=greenHdrGain");

	if (order == "time") {
		saveAs("Tiff", dirDestrggb + toString(offset+i) + "_Green1" + equipment);
	}
	else {
		saveAs("Tiff", dirDestrggb + "Green1_" + toString(offset+i) + equipment);
	}
	object = getImageID();
	selectImage(object); close();
	if (isOpen("deMosaic")) {selectImage("deMosaic"); close(); }
	print(toString(i) + "/" + toString(n) + ": " + toString(offset+i) +" Green1 objectfile finished");

//      Green2 channel

	selectImage(oneimage);
	makeColorChannel("Green2", 0, -1);
	removeBiasDark(dirDestrggb,"Green2_",equipment);

	if (flatcal) {
	imageCalculator("Divide 32-bit","deMosaic",masterFlatGreen2Title); // flat calibration
	}

	run("Multiply...", "value=greenHdrGain");

	if (order == "time") {
		saveAs("Tiff", dirDestrggb + toString(offset+i) + "_Green2" + equipment);
	}
	else {
		saveAs("Tiff", dirDestrggb + "Green2_" + toString(offset+i) + equipment);
	}
	object = getImageID();
	selectImage(object); close();
	if (isOpen("deMosaic")) {selectImage("deMosaic"); close(); }
	print(toString(i) + "/" + toString(n) + ": " + toString(offset+i) +" Green2 objectfile finished");

//      Blue channel

	selectImage(oneimage);
	makeColorChannel("Blue", -1, -1);
	removeBiasDark(dirDestrggb,"Blue_",equipment);

	if (flatcal) {
	imageCalculator("Divide 32-bit","deMosaic",masterFlatBlueTitle); // flat calibration
	}

	run("Multiply...", "value=blueHdrGain");

	if (order == "time") {
		saveAs("Tiff", dirDestrggb + toString(offset+i) + "_Blue" + equipment);
	}
	else {
		saveAs("Tiff", dirDestrggb + "Blue_" + toString(offset+i) + equipment);
	}
	object = getImageID();
	selectImage(object); close();
	if (isOpen("deMosaic")) {selectImage("deMosaic"); close(); }
	print(toString(i) + "/" + toString(n) + ": " + toString(offset+i) +" Blue objectfile finished");
	if (isOpen(oneimage)) {selectImage(oneimage); close(); }
}

if (flatcal) {
	if (isOpen(masterFlatRedTitle)) {selectImage(masterFlatRedTitle); close(); }
	if (isOpen(masterFlatGreen1Title)) {selectImage(masterFlatGreen1Title); close(); }
	if (isOpen(masterFlatGreen2Title)) {selectImage(masterFlatGreen2Title); close(); }
	if (isOpen(masterFlatBlueTitle)) {selectImage(masterFlatBlueTitle); close(); }
}

if (isOpen(idSrc)) {selectImage(idSrc); close(); }
// if (isOpen("cfa")) {selectImage("cfa"); close(); }

setBatchMode(false);

print(" ");
print(work2 + " - Completed");
print("there is no need anymore of the cfa libary, you can erase it");
print("rggb image files saved on: " + dirDestrggb);

call("ij.io.OpenDialog.setDefaultDirectory", rawImagesDirectory); // set to default raw files directory

// END second part demosaic of CFA and flat calibrate and store as TIFF 32-bit



// ***************** functions **************************************************************


// This is the heart of reading raw DSLR files
// I got it from http://ij-plugins.sourceforge.net/plugins/dcraw/
// small modifications by me to handle batch reading
// You must have it downloaded and installed
// [] because of spaces in filename
	function readRawFiles(dir,filename) {
		run("DCRaw Reader...",
		"open=[" + dir + filename + "] " +
		"use_temporary_directory " +
		"white_balance=[None] " +
		"do_not_automatically_brighten " +
		"output_colorspace=[raw] " +
		"document_mode " +  // black borders (overscan area) or not
		"document_mode_without_scaling " +
		"read_as=[16-bit linear] " +
		"interpolation=[High-speed, low-quality bilinear] " +
//		"half_size " +
		"do_not_rotate " +
//		"show_metadata" +
		"");
	}


// function Reduce size and demosaic stack
	function makeColorChannel(name, dx, dy) {
		halfWidth = getWidth()/2;
		halfHeight = getHeight()/2;
		run("Duplicate...", "title=&name duplicate");
		run("Translate...", "x=&dx y=&dy interpolation=None");
		run("Size...", "width=&halfWidth height=&halfHeight depth=&n interpolation=None");
		rename("deMosaic");
	}


// function removeBiasDark, this function only works for Canon EOS, tested on Canon 350D, 5D and 6D
	function removeBiasDark(dirDest,filename,equipment) {
	selectImage("deMosaic");
	run("32-bit");
	getSelectionBounds(x, y, width, height) ;
	makeRectangle(3, 20, 20, height-40); // black area (overscan area), works raws Canon EOS 350D, 5D, 6D
	getRawStatistics(pix,mean,min,max,std,hist);
	run("Select None");
	run("Subtract...", "value=mean");
	}
